What happens when you initialize a repository? Why do you need to do it?

It adds turns the directory in a the first branch of the repository but no commits are added yet. To tell git that this directory is to be a git repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is where you add the files to be committed. The working directory is where you create and edit your projects files. The value in that it is temporary in case you make a mistake.

How can you use the staging area to make sure you have one commit per logical change?

the "commit add" command adds the modified file to the staging area. "git diff --staged" will compare the changes in the staging area to the working area. Now commit. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful when you want to expermint with your code with out touching the working version of our project. examples are adding support for different languages... sharing with ohter coders.

How do the diagrams help you visualize the branch structure?
Diagrams help visual like where a new branches start and end.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

merging combines all commits of the the branches into one branch. it represented that way to beter see the commits and history as one model 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

merging automatically lets git decide what is to be merged and sometimes might be incorrect if there are mulitple coders working on the same project.. however merging automatically might help if there are alot of files in the project.